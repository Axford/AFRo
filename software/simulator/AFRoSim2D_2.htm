<html>
<head>

<style>

    html, body {
      width:100%;
      height:100%;
      margin:0;
    }

	.graph {
		width: 95%;
		height: 20%;
		top: 80%;
		position:absolute;
	}
	
	#info {
		position:absolute;
		left: 250px;
	}
	
	#canvas {
		position:absolute;
	}

</style>
		

	<script type="text/javascript" src="jquery.js"></script>
	<script language="javascript" type="text/javascript" src="flot/jquery.flot.js"></script>
	<script type="text/javascript" src="dat.gui.min.js"></script>
	<script src="http://cdnjs.cloudflare.com/ajax/libs/three.js/r68/three.js"></script>
	
	

<script type="text/javascript">

function sqr(a) {
   return a * a;
}

$(function() {

  var mx = 0;
  var my = 0;
  var md = false;
  
  var targetLine;
  
  var AFRo = function() {
  	  this.PostPosition = new THREE.Vector3(0,0,0);
  	  this.PostHeight = 500;
  	  this.PostRadius = 20/2;
  	  
  	  this.ShoulderOffset = 60;
  
	  this.ShoulderPosition = new THREE.Vector3(0, 0, this.ShoulderOffset);
	  this.ShoulderMaxAngle = 300/2;
	  this.ShoulderMinAngle = -this.ShoulderMaxAngle;
	  this.ShoulderAngle = 0;
	  
	  this.HumerusLength = 200;
	  
	  this.HumerusObj = null;
	  
	  this.ElbowPosition = function() {
	  	  return this.ElbowPositionFK(this.ShoulderAngle);
	  }
	  
	  this.ElbowPositionFK = function(ShoulderAng) {
	  	  var sp = new THREE.Vector3();
	  	  sp.copy(this.PostPosition);
	  	  sp = sp.add(this.ShoulderPosition);
	  	  sp.x += this.HumerusLength * Math.cos(ShoulderAng * Math.PI/180);
	  	  sp.y += this.HumerusLength * Math.sin(ShoulderAng * Math.PI/180); 
	  	  return sp;
	  }
	  
	  
	  this.ElbowMaxAngle = 300/2;
	  this.ElbowMinAngle = -this.ElbowMaxAngle;
	  this.ElbowAngle = 0;
	  
	  this.UlnaLength = 200;
	  
	  this.UlnaObj = null;
	  
	  this.WristPosition = function() {
	  	  return this.WristPositionFK(this.ShoulderAngle, this.ElbowAngle);
	  }
	  
	  this.WristPositionFK = function(ShoulderAng, ElbowAng) {
		  var sp = new THREE.Vector3();
	  	  sp.copy(this.ElbowPositionFK(ShoulderAng));
	  	  sp.x += this.UlnaLength * Math.cos((ElbowAng + ShoulderAng) * Math.PI/180);
	  	  sp.y += this.UlnaLength * Math.sin((ElbowAng + ShoulderAng) * Math.PI/180); 
	  	  return sp;
	  }
	  
	  this.WristMaxAngle = 330/2;
	  this.WristMinAngle = -this.WristMaxAngle;
	  this.WristAngle = 0;
	  
	  
	  this.SpoonLength = 100;
	  this.SpoonRadius = 35/2;
	  
	  this.SpoonPosition = function() {
	  	  return this.SpoonPositionFK(this.ShoulderAngle, this.ElbowAngle, this.WristAngle);
	  }
	  
	  this.SpoonPositionFK = function(ShoulderAng, ElbowAng, WristAng) {
	  	  var sp = new THREE.Vector3();
	  	  sp.copy(this.WristPositionFK(ShoulderAng, ElbowAng));
	  	  sp.x += this.SpoonLength * Math.cos((WristAng + ElbowAng + ShoulderAng) * Math.PI/180);
	  	  sp.y += this.SpoonLength * Math.sin((WristAng + ElbowAng + ShoulderAng) * Math.PI/180); 
	  	  return sp;    
	  }
	  
	  // returns spoon angle in world frame
	  this.SpoonAngle = function() {
	  	  return this.ShoulderAngle + this.ElbowAngle + this.WristAngle;
	  }
	  
	};
	
  var afro = new AFRo();

  var SpoonTarget = function(pos, ang) {
  	this.pos = new THREE.Vector3();
  	this.pos.copy(pos);
  	this.ang = ang;
  }
  
  var spoonTarget = new SpoonTarget(afro.SpoonPosition(), 30);
  var spoonCurrent = new SpoonTarget(new THREE.Vector3(0,0,0), 0);
  var spoonNow = new SpoonTarget(new THREE.Vector3(0,0,0), 0);

	window.onload = function() {
	  
	  var gui = new dat.GUI();
	  gui.add(afro, 'ShoulderAngle', afro.ShoulderMinAgle, afro.ShoulderMaxAngle);
	  
	};
	
   var moveQueue = []

   var currentPlate = 0;
   var currentSegment = 0;
   var plates = [
     {
     	x:200,
     	y:0,
     	radius: 250/2,
     	segments: 20
      },
     {
     	x:0,
     	y:200,
     	radius:150/2,
     	segments:12
     },
     {
     	x:200,
     	y:200,
     	radius:100/2,
     	segments:6
     },
     {
     	x:-100,
     	y:-150,
     	radius:100/2,
     	segments:6
     }
   ];
   
   var eatState = false;  // fasle = idle, true = active


  // set the scene size
	var WIDTH = window.innerWidth,
	    HEIGHT = window.innerHeight;

	// set some camera attributes
	var VIEW_ANGLE = 45,
	    ASPECT = WIDTH / HEIGHT,
	    NEAR = 0.1,
	    FAR = 10000;
	    
	var frame = 0;
	var simTime = 0;
	var lastTime = new Date();
	    
	
	var data = [];
	var data1 = [];
	var totalPoints = 1000;
	
	for (var i=1; i<totalPoints; i++) {
		data.push([i,0]);
		data1.push([i,0]);
	}
	
	
	function getData() {
		return [data,data1];
	}
	
	var plot;

	function updatePlot() {
		plot.setData(getData());
		plot.setupGrid();
		plot.draw();
	}

			

	function init() {

		
		

		window.addEventListener( 'resize', onWindowResize, false );
		
		onWindowResize();

	}
	
	
  function rotateVector2(V, ang) {
  	 var l = V.length();
  	 var VT = new THREE.Vector2(V.x,V.y);
  	 
  	 var sang = Math.atan2(V.y, V.x);
  	 
  	 sang += ang;
  	 VT.x = l * Math.cos(sang);
  	 VT.y = l * Math.sin(sang);	 
  	  
  	 return VT;
  }
  
  var dirs = [false,false,false];
  var twitch = [false, false, true];
  
  function nextTwitch() {
  	twitch[0] = false;
	twitch[1] = false;
	twitch[2] = false;
	twitch[Math.round(Math.random()*2)] = true;
  }
  
var cx = canvas.width/2;
var cy = canvas.height/2;
var scale = canvas.height/(2.1*(afro.HumerusLength + afro.UlnaLength + afro.SpoonLength));
		
var moving = true;
var moveLength = 0;


function clamp(x,max,min) {
   return Math.max(min, Math.min(max, x));
}


  // returns the possible joint solutions for spoon pos and ang
  function getJointSolutionsForSpoon(pos, ang) {
  		var beyondReach = false;
  
  	 // first assume spoon is in the correct position, and work-out the required wrist position
		var wristTarget = new THREE.Vector3();
		wristTarget.copy(pos);
		wristTarget.x -= afro.SpoonLength * Math.cos(ang * Math.PI/180);
		wristTarget.y -= afro.SpoonLength * Math.sin(ang * Math.PI/180);
		
		
		var i1 = sqr(wristTarget.x) + sqr(wristTarget.y) - sqr(afro.HumerusLength) - sqr(afro.UlnaLength);
		var i2 = 2 * afro.HumerusLength * afro.UlnaLength;
		
		if (i1 > i2 || i1 < -i2) {
		   // invalid solution, beyond reach!
		   console.log("invalid target, beyond reach");
		   i1 = clamp(i1, i2, -i2);
		   beyondReach = true;
		}
		
		// solve IK for wrist position
		var b = Math.acos(
					i1 / 
					i2
				);
		// alternate solution
		var b2 = 2*Math.PI - b;
		
		var i3 = Math.atan2(wristTarget.y, wristTarget.x);
		
		var a = i3 - 
				Math.atan2(
				 	afro.UlnaLength * Math.sin(b),
				 	afro.HumerusLength + afro.UlnaLength * Math.cos(b)
				);
		
		var a2 = i3 - 
				Math.atan2(
				 	afro.UlnaLength * Math.sin(b2),
				 	afro.HumerusLength + afro.UlnaLength * Math.cos(b2)
				);
				
		if (isNaN(a) || isNaN(b) || isNaN(a2) || isNaN(b2)) {
		   console.log("invalid solution", a,b,a2,b2);
		}
				
		var result = {};
		result.a = a;
		result.b = b;
		result.a2 = a2;
		result.b2 = b2;
		result.beyondReach = beyondReach;
	    return result;
  }
  
  
  function evaluateJointSolution(a,b,c,spoonPos) {
  	 	var soln = {};
  	 	
      	soln.ShoulderAngle = applyJointLimits(a * 180/Math.PI, afro.ShoulderMaxAngle, afro.ShoulderMinAngle);
	  	soln.ElbowAngle = applyJointLimits(b * 180/Math.PI, afro.ElbowMaxAngle, afro.ElbowMinAngle);
		soln.WristAngle = c - (soln.ShoulderAngle + soln.ElbowAngle);
		soln.WristAngle = applyJointLimits(soln.WristAngle, afro.WristMaxAngle, afro.WristMinAngle);
		
		soln.jd = calcJointDistance(
			spoonCurrent.ShoulderAngle, spoonCurrent.ElbowAngle, spoonCurrent.WristAngle,
			soln.ShoulderAngle, soln.ElbowAngle, soln.WristAngle	
		);
		
		soln.accuracy = afro.SpoonPositionFK(soln.ShoulderAngle, soln.ElbowAngle, soln.WristAngle);
		soln.accuracy.sub(spoonPos);
		soln.accuracy = soln.accuracy.length();
      
        return soln;
  }
  
  function evaluateJointSolutionsForSpoon(pos, ang) {
		var j = getJointSolutionsForSpoon(pos, ang);
		
		var solns = [];

		var soln = evaluateJointSolution(j.a, j.b, ang, pos);
		if (soln.accuracy < 0.1) solns.push(soln);
				
		var soln = evaluateJointSolution(j.a2, j.b2, ang, pos);
		if (soln.accuracy < 0.1) solns.push(soln);
		
		
		solns.sort(function(a,b) {
			return a.jd - b.jd;
		});
		
		// return array of solutions, in order of jd
		return solns;
  }
  
  function requiredStartForWorldSpaceMove(fromPos, fromAng, toPos, toAng) {
	 // return starting configurations for a valid world space move
	 var solns = [];
	 
	 // generate solutions for start
	 
	 
	 
	 // validate against mid-point
	 
	 // validate against end
	 
	 
	 
	 // order by jd
	 
	 return solns;
  }

  function moveInWorldSpace() {
  	   
		// interpolate target position of spoon
		spoonNow.pos.x = (spoonTarget.pos.x - spoonCurrent.pos.x) * frame / moveLength + spoonCurrent.pos.x;
		spoonNow.pos.y = (spoonTarget.pos.y - spoonCurrent.pos.y) * frame / moveLength + spoonCurrent.pos.y;
		spoonNow.pos.z = spoonTarget.pos.z;
		spoonNow.ang = (spoonTarget.ang - spoonCurrent.ang) * frame / moveLength + spoonCurrent.ang;
	
		spoonNow.ang = applyJointLimits(spoonNow.ang, 180, -180);
	
		//console.log(spoonNow.ang);
		
		// update robot arm positions
		// -----------------------------
		
		var j = evaluateJointSolutionsForSpoon(spoonNow.pos, spoonNow.ang);
		
		if (j.length > 0) {
		    // apply joints
		  afro.ShoulderAngle = j[0].ShoulderAngle;
		  afro.ElbowAngle = j[0].ElbowAngle;
		  afro.WristAngle = j[0].WristAngle;
		
		} else {
		    console.log("move not possible");
		}
  }
  
  function applyJointLimits(ang, maxAng, minAng) {
     while (ang > maxAng && ang>180) {
     	ang -= 360;
     }
     while (ang < minAng && ang<-180) {
     	ang += 360;
     }
     
     if (ang > maxAng) ang = maxAng;
     if(ang < minAng) ang = minAng;
     return ang;
  }

  function calcJointDistance(a1,b1,c1, a2,b2,c2) {
     // pretend joints are in euclidean space
     return Math.sqrt(sqr(a1-a2) + sqr(b1-b2) + sqr(c1-c2));
  }


  function moveInJointSpace() {
	  // ref stored joint angles for current
  
	  // calc destination joint angles
	  // -----------------------------
	  var j = getJointSolutionsForSpoon(spoonTarget.pos, spoonTarget.ang);
  
	  // choose solution
	  // ---------------
	  
	  // solution 1
	  var ShoulderAngle = applyJointLimits(j.a * 180/Math.PI, afro.ShoulderMaxAngle, afro.ShoulderMinAngle);
	  var ElbowAngle = applyJointLimits(j.b * 180/Math.PI, afro.ElbowMaxAngle, afro.ElbowMinAngle);
	  var WristAngle = spoonTarget.ang - (ShoulderAngle + ElbowAngle);
	  WristAngle = applyJointLimits(WristAngle, afro.WristMaxAngle, afro.WristMinAngle);
      var jd = calcJointDistance(
      	spoonCurrent.ShoulderAngle, spoonCurrent.ElbowAngle, spoonCurrent.WristAngle,
      	ShoulderAngle, ElbowAngle, WristAngle	
      );

	  // solution 2
	  var ShoulderAngle2 = applyJointLimits(j.a2 * 180/Math.PI, afro.ShoulderMaxAngle, afro.ShoulderMinAngle);
	  var ElbowAngle2 = applyJointLimits(j.b2 * 180/Math.PI, afro.ElbowMaxAngle, afro.ElbowMinAngle);
	  var WristAngle2 = spoonTarget.ang - (ShoulderAngle2 + ElbowAngle2);
	  WristAngle2 = applyJointLimits(WristAngle2, afro.WristMaxAngle, afro.WristMinAngle);
 	  var jd2 = calcJointDistance(
      	spoonCurrent.ShoulderAngle, spoonCurrent.ElbowAngle, spoonCurrent.WristAngle,
      	ShoulderAngle2, ElbowAngle2, WristAngle2
      );
      

	  // is wrist outside allowable range?   or jd2 < jd
	  if (WristAngle > afro.WristMaxAngle || WristAngle < afro.WristMinAngle || jd2 < jd) {
		  ShoulderAngle = ShoulderAngle2;
		  ElbowAngle = ElbowAngle2;
		  WristAngle = WristAngle2;
		  if (frame==1) console.log("using solution 2", jd, jd2);
	  }
	  
	  
	  if (frame == 1) {
	    console.log("Shoulder:",spoonCurrent.ShoulderAngle, ShoulderAngle);
	    console.log("Elbow:",spoonCurrent.ElbowAngle, ElbowAngle);
	  	console.log("Wrist:",spoonCurrent.WristAngle, WristAngle);
	  }
	  
	  // interpolate
	  var t = frame/moveLength;
	  afro.ShoulderAngle = (ShoulderAngle - spoonCurrent.ShoulderAngle)*t + spoonCurrent.ShoulderAngle;
	  afro.ElbowAngle = (ElbowAngle - spoonCurrent.ElbowAngle)*t + spoonCurrent.ElbowAngle;
	  afro.WristAngle = (WristAngle - spoonCurrent.WristAngle)*t + spoonCurrent.WristAngle;
	    
	
  }
  
  function saveArmState() {
  	// store current position
	spoonCurrent.pos.copy(afro.SpoonPosition());
	spoonCurrent.ang = applyJointLimits(afro.SpoonAngle(), 180, -180);
	// hack to store current joint angles
	spoonCurrent.ShoulderAngle = afro.ShoulderAngle;
	spoonCurrent.ElbowAngle = afro.ElbowAngle;
	spoonCurrent.WristAngle = afro.WristAngle;
  }
  
  function animate() {

		requestAnimationFrame( animate );
		
		
		frame +=1;
		var thisTime = new Date();
		simTime += thisTime - lastTime;
		lastTime = thisTime;
		
		
		// Direct canvas updates
		var canvas=document.getElementById('canvas');
		var ctx=canvas.getContext('2d');

		//ctx.clearRect(0, 0, canvas.width, canvas.height);
		
		ctx.fillStyle = 'rgba(255,255,255,0.05)';
   		//if (Math.random() < 0.1) 
   			ctx.fillRect(0, 0, ctx.canvas.width, ctx.canvas.height);
		
		ctx.strokeStyle = "#888";
		ctx.lineWidth = 1;
		
		if (frame > moveLength) {
			moving = false;
			frame = 0;
		
			// calc next segment
			if (eatState) {
				// position at plate centre, aligned ready for next scoop
				currentSegment += 1;
				if (currentSegment >= plates[currentPlate].segments) {
					currentSegment = 0;
					
					// next plate
					currentPlate += 1;
					if (currentPlate >= plates.length) currentPlate = 0;
				}
				
				console.log("centring on segment: ", currentSegment);
				
				// calc target
				spoonTarget.pos.x = plates[currentPlate].x;
				spoonTarget.pos.y = plates[currentPlate].y;
				spoonTarget.ang = currentSegment * (360/plates[currentPlate].segments);
				spoonTarget.ang = applyJointLimits(spoonTarget.ang, 180, -180);
				
				saveArmState();
				
				// start move
				moveLength = 50;
				moving = true;
			    
			    eatState = false;
			} else {
				// scoop through next segment, world space move
				console.log("scooping...");
				
				// calc target
				spoonTarget.pos.x = plates[currentPlate].x + 
						plates[currentPlate].radius * Math.cos(spoonTarget.ang * Math.PI/180);
				spoonTarget.pos.y = plates[currentPlate].y + 
						plates[currentPlate].radius * Math.sin(spoonTarget.ang * Math.PI/180);
				
				saveArmState();
				
				var solns = requiredStartForWorldSpaceMove(
					spoonCurrent.pos, spoonCurrent.ang, 
					spoonTarget.pos, spoonTarget.ang
				);
				
				if (solns.length > 0) {
					// is best solution different to current configuration?
					// if not, queue up a joint space move to get in the right configuration
					// followed by the world space move
					
				} else {
					// impossible move!
					// move in joint space instead?
					console.log("impossible world space move");
				}
				
				// start move
				moveLength = 30;
				moving = true;
				
				eatState = true;
			}
			
		}
		
		
		if (moving) {
			if (eatState) {
				moveInWorldSpace();
			} else {
				moveInJointSpace();
			}
			
			
		}
		
		
		//console.log(afro.ShoulderAngle, afro.ElbowAngle, afro.WristAngle, spoonTarget.ang);
		
		// draw post
		ctx.beginPath();
		ctx.arc(cx,cy,afro.PostRadius * scale, 0, 2*Math.PI);
		ctx.stroke();
		
		
		// humerus
		var x1 = cx + afro.ElbowPosition().x * scale;
		var y1 = cy - afro.ElbowPosition().y * scale;
		
		ctx.beginPath();
		ctx.moveTo(cx,cy);
		ctx.lineTo(x1, y1);
		ctx.lineWidth = 1;
		ctx.strokeStyle = "rgba(120,120,120,1)";
		ctx.stroke();
		
		// ulna
		var x2 = cx + afro.WristPosition().x * scale;
		var y2 = cy - afro.WristPosition().y * scale;
		
		ctx.beginPath();
		ctx.moveTo(x1,y1);
		ctx.lineTo(x2, y2);
		ctx.lineWidth = 1;
		ctx.strokeStyle = "rgba(255,120,120,1)";
		ctx.stroke();
		
		// spoon
		var x3 = cx + afro.SpoonPosition().x * scale;
		var y3 = cy - afro.SpoonPosition().y * scale;
		
		ctx.beginPath();
		ctx.moveTo(x2,y2);
		ctx.lineTo(x3, y3);
		ctx.lineWidth = 1;
		ctx.strokeStyle = "rgba(120,120,255,1)";
		ctx.stroke();
		
		ctx.beginPath();
		ctx.strokeStyle = "rgba(120,120,255,1)";
		ctx.arc(x3,y3,afro.SpoonRadius * scale, 0, 2*Math.PI);
		ctx.stroke();
		
		
		// spoon target
		var x3 = cx + spoonTarget.pos.x * scale;
		var y3 = cy - spoonTarget.pos.y * scale;
		
		var x4 = x3 - 20 * Math.cos(spoonTarget.ang * Math.PI/180);
		var y4 = y3 + 20 * Math.sin(spoonTarget.ang * Math.PI/180);
				
		ctx.beginPath();
		ctx.moveTo(x4,y4);
		ctx.lineTo(x3, y3);
		ctx.lineWidth = 1;
		ctx.strokeStyle = "rgba(255,0,0,1)";
		ctx.stroke();
		
		ctx.beginPath();
		ctx.strokeStyle = "rgba(255,0,0,1)";
		ctx.arc(x3,y3,afro.SpoonRadius * scale, 0, 2*Math.PI);
		ctx.stroke();
		
		//wristTarget
		/*
		x3 = cx + wristTarget.x * scale;
		y3 = cy - wristTarget.y * scale;
	
		ctx.beginPath();
		ctx.strokeStyle = "rgba(0,255,0,1)";
		ctx.arc(x3,y3,5, 0, 2*Math.PI);
		ctx.stroke();
		*/
		
		
		// spoon now
		var x3 = cx + spoonNow.pos.x * scale;
		var y3 = cy - spoonNow.pos.y * scale;
		
		var x4 = x3 - 20 * Math.cos(spoonNow.ang * Math.PI/180);
		var y4 = y3 + 20 * Math.sin(spoonNow.ang * Math.PI/180);
				
		ctx.beginPath();
		ctx.moveTo(x4,y4);
		ctx.lineTo(x3, y3);
		ctx.lineWidth = 1;
		ctx.strokeStyle = "rgba(0,0,255,1)";
		ctx.stroke();
		
		ctx.beginPath();
		ctx.strokeStyle = "rgba(0,0,255,1)";
		ctx.arc(x3,y3,afro.SpoonRadius * scale, 0, 2*Math.PI);
		ctx.stroke();
		
		
		// plate
		for (var i=0; i<plates.length; i++) {
			var x5 = cx + plates[i].x * scale;
			var y5 = cy - plates[i].y * scale;
			ctx.beginPath();
			ctx.strokeStyle = "rgba(120,120,120,1)";
			ctx.arc(x5,y5, plates[i].radius * scale, 0, 2*Math.PI);
			ctx.stroke();
		
		}
		
		
		
		
		
	}
	
  
  
  function onWindowResize() {	
  		var canvas=document.getElementById('canvas');
		canvas.width = window.innerWidth;
		canvas.height = window.innerHeight;
		
		cx = canvas.width/2;
		cy = canvas.height/2;
		scale = canvas.height/(2.1*(afro.HumerusLength + afro.UlnaLength + afro.SpoonLength));

	}
  
  jQuery(document).ready(function($) {
	
	plot = $.plot("#plot", [ getData() ], {
			series: {
				shadowSize: 0	// Drawing is faster without shadows
			}
		});
	
	init();
	animate();

  });
  
  (function() {
    window.onmousedown = handleMouseDown;
    function handleMouseDown(event) {
        event = event || window.event; // IE-ism
        mx = event.clientX;
        my = event.clientY;
        md = true;
        // event.clientX and event.clientY contain the mouse position


		moving = false;
        
        spoonTarget.pos.x = (mx - cx)/scale;
        spoonTarget.pos.y = (cy - my)/scale;
        
        var ml = new THREE.Vector3();
        ml.copy(spoonTarget.pos);
        ml.sub(afro.SpoonPosition());
        moveLength = Math.round(ml.length() / 2);
        
        console.log(moveLength);


       //moveLength = 0;
    }
    
    window.onmouseup = handleMouseUp;
    function handleMouseUp(event) {
        event = event || window.event; // IE-ism
        //mx = event.clientX;
        //my = event.clientY;
        md = false;
        

        spoonTarget.ang = Math.atan2((event.clientY-my), -(event.clientX - mx)) * 180/Math.PI; 
        
        moving = true;
        frame = 0;
      
        saveArmState(); 



    }
})();

  
});
</script>


</head>
<body>

	<div id="info"></div>

	<div id="plot" class="graph"></div>

	<canvas id="canvas"></canvas>
	
</body>
</html>
